<!DOCTYPE html>
<html>
<head>
<meta charset="utf8" />
<script type="text/javascript">window.gracenode={"keys":["one","two","three"],"data":{"one":{"type":"string","value":"One"},"two":{"type":"number","value":2},"three":{"type":"array","value":[3]}}};(function (window) {var domain = window.location.origin;/* expose */window.request = request;/*options: {sendAsBinary: <boolean>,mimeType: <string>,headers: <object>}*/function request(url, method, params, options, cb) {url = domain + url;var req;if (!params) {params = {};}if (!options) {options = {};}url = window.encodeURI(url);/* sad but we have to deal with IE < 7 */if (!window.XMLHttpRequest) {/* so someone is ignorant enough to be use IE... */req = new window.ActiveXObject('Microsoft.XMLHTTP');} else {req = new window.XMLHttpRequest();}/* set up request parameters */try {params = setupParams(params);} catch (exception) {return cb(exception);}/* set up request object */req.overrideMimeType(options.mimeType || 'text');req.open(method, url, true);/* default content type header */req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');/* if we need to send more headers */if (options.headers) {for (var name in options.headers) {req.setRequestHeader(name, options.headers[name]);}}/* set up the listener */req.onreadystatechange = function () {handleResponse(req, cb);};/* now send the request */if (options.sendAsBinary) {return req.sendAsBinary(params);}req.send(params);}function setupParams(params) {var str = '';for (var key in params) {if (str !== '') {str += '&';}str += window.encodeURIComponent(key) + '=' + prepareParamValue(params[key]);}return str;}function prepareParamValue(param) {if (typeof param === 'object') {return window.encodeURIComponent(JSON.stringify(param));}return window.encodeURIComponent(param);}function handleResponse(req, cb) {if (req.readyState === 4) {/* we now have the response back */var error;var res = null;/* evaluate response status code */if (req.status > 399) {/* error */error = new Error(req.status);}/* deal with response body */if (req.responseText) {/* is it a JSON? */try {res = JSON.parse(req.responseText);} catch (e) {/* it is not a JSON */res = req.responseText;}}cb(error, res, req.status);}}}(window));(function () {var TAGS = {SRC: 'data-gn-src',LOCAL: 'data-gn-local',DONE: 'data-gn-rendered'};var TAG_EXEC_MAP = {};TAG_EXEC_MAP[TAGS.SRC] = getRemoteData;TAG_EXEC_MAP[TAGS.LOCAL] = getLocalData;document.addEventListener('DOMContentLoaded', parse, false);window.setRemoteData = function (dom, value) {dom.setAttribute(TAGS.SRC, value);getRemoteData(dom, value);};window.setLocalData = function (dom, value) {dom.setAttribute(TAGS.LOCAL, value);getLocalData(dom, value);};window.render = function (target) {parse(null, target.parentNode);};function parse(event, target) {for (var key in TAGS) {finder(TAGS[key], target);}}function finder(tagName, target) {target = target || document;var list = target.querySelectorAll('[' + tagName + ']') || [];var exec = TAG_EXEC_MAP[tagName];for (var i = 0, len = list.length; i < len; i++) {if (list[i].getAttribute(TAGS.DONE)) {continue;}exec(list[i], list[i].getAttribute(tagName));}}function getRemoteData(elm, path) {window.request(path, 'GET', {}, {}, function (error, data) {if (error) {console.log(path, error);return;}var dom = buildDOM(data);elm.appendChild(dom);elm.setAttribute(TAGS.DONE, true);});}/* example: gracenode.myData */function getLocalData(elm, str) {var list = str.split('.');var data = window;for (var i = 0, len = list.length; i < len; i++) {data = data[list[i]];}if (!data || data === window) {console.error(str, 'InvalidLocalData');}var dom = buildDOM(data);elm.appendChild(dom);elm.setAttribute(TAGS.DONE, true);}function buildDOM(data) {switch (typeof data) {case 'object':if (Array.isArray(data)) {return buildList(data);}return buildTwoColumnTable(data);default:return buildText(data);}}function buildList(data) {var container;var i;var len;/* a list of map = table */if (typeof data[0] === 'object') {var row;var labels = [];container = document.createElement('table');container.className = 'list-table';/* table labels */row = document.createElement('tr');for (i = 0, len = data.length; i < len; i++) {for (var name in data[i]) {if (labels.indexOf(name) !== -1) {continue;}labels.push(name);var th = document.createElement('th');th.textContent = name;row.appendChild(th);}}container.appendChild(row);/* table rows */var jen = labels.length;for (i = 0, len = data.length; i < len; i++) {row = document.createElement('tr');for (var j = 0; j < jen; j++) {var td = document.createElement('td');content = buildDOM(data[i][labels[j]] || '');td.appendChild(content);row.appendChild(td);}container.appendChild(row);}/* done */return container;}/* a list of text = list */container = document.createElement('ul');container.className = 'list-container';for (i = 0, len = data.length; i < len; i++) {var item = document.createElement('li');item.appendChild(buildDOM(data[i]));container.appendChild(item);}/* done */return container;}function buildTwoColumnTable(data) {var container = document.createElement('table');container.className = 'two-col-table';for (var name in data) {var row = document.createElement('tr');var label = document.createElement('th');label.textContent = name;row.appendChild(label);var value = document.createElement('td');value.appendChild(buildDOM(data[name]));row.appendChild(value);container.appendChild(row);}return container;}function buildText(data) {var container = document.createElement('div');container.className = 'text' + (typeof data === 'number' ? ' number' : '');container.textContent = data;return container;}}());</script>
</head>
<body>
<div>class&nbps;name:&nbsp;one</div><div>class&nbps;name:&nbsp;two</div><div>class&nbps;name:&nbsp;three</div>
<div style="color: #f00;">string : One</div><div style="color: #f00;">number : 2</div><div style="color: #f00;">array : [3]</div>
</body>
</html>
